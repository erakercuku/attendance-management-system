#include "attendance.hpp"
#include "utils.hpp"
#include "storage.hpp"
#include "input.hpp"
#include <iostream>
#include <fstream>
#include <ctime>

void Attendance::display_menu(void)
{
    int options = USER_OPT_COUNT - 1;
    std::string prompt, input;

    prompt = "Menu options:\n  1. View attendance logs\n";

    switch (user.get_role())
    {
    case 1: // ADMIN
    {
        prompt += "  2. Edit attendance logs\n  3. View analytics and reports\n"
                  "  4. Assign/modify roles\n  5. Logout\n"
                  "Enter the number of the option you want to perform: ";
        options = ADMIN_OPT_COUNT - 21;

        while (true)
        {
            Input::get(prompt, input, NUM_MAX, options, Input::valid_opt);

            Admin_menu_opt selection = (Admin_menu_opt)(std::stoi(input) + 20);

            switch (selection)
            {
            case A_VIEW:
                view_attendance();
                break;

            case EDIT:
                std::cout << "To be implemented.\n";
                break;

            case A_ANALYTICS:
                get_analytics();
                break;

            case ASSIGN_ROLE:
                assign_roles();
                break;

            case A_LOGOUT:
                if (logout(*this))
                    return;
                break;

            default:
                std::cerr << "Something has gone wrong, please try again later.\n";
                return;
            }
        }
        break;
    }
    case 2: // MANAGER
    {
        prompt += "  2. View analytics and reports\n  3. Logout\n"
                  "Enter the number of the option you want to perform: ";
        options = MANAGER_OPT_COUNT - 11;

        while (true)
        {
            Input::get(prompt, input, NUM_MAX, options, Input::valid_opt);

            Manager_menu_opt selection = (Manager_menu_opt)(std::stoi(input) + 10);

            switch (selection)
            {
            case M_VIEW:
                view_attendance();
                break;

            case M_ANALYTICS:
                get_analytics();
                break;

            case M_LOGOUT:
                if (logout(*this))
                    return;
                break;

            default:
                std::cerr << "Something has gone wrong, please try again later.\n";
                return;
            }
        }
        break;
    }
    case 3: // USER
    {
        prompt += "  2. Logout\n"
                  "Enter the number of the option you want to perform: ";

        while (true)
        {
            Input::get(prompt, input, NUM_MAX, options, Input::valid_opt);

            User_menu_opt selection = (User_menu_opt)std::stoi(input);

            switch (selection)
            {
            case VIEW:
                view_attendance();
                break;

            case LOGOUT:
                if (logout(*this))
                    return;
                break;

            default:
                std::cerr << "Something has gone wrong, please try again later.\n";
                return;
            }
        }
        break;
    }
    default:
        break;
    }
}

void Attendance::mark_attendance(void)
{
    std::time_t now = std::time(nullptr);
    Storage::save_attendance(user.get_username(), now);

    return;
}

void Attendance::view_attendance(void) const
{
    std::string username = user.get_username();

    std::cout << "\n========== Attendance Logs ==========\n";

    switch (user.get_role())
    {
    case 1: // ADMIN
    {
        std::cout << "Admin access granted. Displaying all attendance logs:\n";
        Storage::print_all_attendance();
        break;
    }
    case 2: // MANAGER
    {
        std::cout << "Manager access granted. Displaying all attendance logs:\n";
        Storage::print_all_attendance();
        break;
    }
    case 3: // USER
    {
        std::cout << "User access granted. Displaying attendance logs for " << username << ":\n";
        Storage::print_user_attendance(username);
        break;
    }
    default:
    {
        std::cerr << "Error: Invalid user role detected.\n";
        break;
    }
    }

    std::cout << "=====================================\n";
}

void Attendance::edit_attendance(void)
{
    std::cout << "You are editing the attendance.\n";
    return;
}

void Attendance::get_analytics(void) const
{
    std::cout << "You are getting the analytics.\n";
    return;
}

void Attendance::assign_roles(void)
{
    if (user.get_role() != 1) // Only Admin (Role 1) can assign roles
    {
        std::cerr << "Permission denied. Only admins can assign roles.\n";
        return;
    }

    std::string target_user;
    int new_role;

    std::cout << "\n========== Assign Roles ==========\n";

    // Get a valid username
    Input::get("Enter the username of the user whose role you want to modify: ", target_user);

    if (!Storage::user_exists(target_user))
    {
        std::cerr << "Error: User '" << target_user << "' not found in the database.\n";
        return;
    }

    // Fetch current role
    int current_role = Storage::get_user_role(target_user);

    std::cout << "Current role of " << target_user << " is: ";
    switch (current_role)
    {
    case 1: std::cout << "Admin\n"; break;
    case 2: std::cout << "Manager\n"; break;
    case 3: std::cout << "User\n"; break;
    default: std::cout << "Unknown\n"; break;
    }

    // Get a new valid role (Admins cannot assign another Admin)
    Input::get("Enter the new role (2: Manager, 3: User): ", new_role, 2, 3, Input::valid_opt);

    if (current_role == new_role)
    {
        std::cerr << "Error: The user is already assigned to this role.\n";
        return;
    }

    std::cout << "Updating role for user '" << target_user << "'...\n";

    if (Storage::update_user_role(target_user, new_role))
    {
        std::cout << "Role successfully updated for " << target_user << ".\n";

        // Log the role change for security
        std::ofstream logFile("role_change.log", std::ios::app);
        if (logFile)
        {
            std::time_t now = std::time(nullptr);
            logFile << std::ctime(&now) << "Admin " << user.get_username()
                    << " changed role of " << target_user << " to " << new_role << ".\n";
            logFile.close();
        }
    }
    else
    {
        std::cerr << "Error updating role. Please try again.\n";
    }

    std::cout << "=====================================\n";
}
